name: Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin pytest pytest-asyncio pytest-rerunfailures
    
    - name: Build and install package
      run: |
        # Clean any existing installations and caches
        pip uninstall -y floodr || true
        pip cache purge || true
        rm -rf build/ dist/ *.egg-info target/wheels/ || true
        # Build the package fresh
        maturin build --release
        # List built wheels
        ls -la target/wheels/
        # Install the built wheel using Python to handle cross-platform paths
        python -c "import glob, subprocess, sys; wheels = glob.glob('target/wheels/floodr-*.whl'); subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--force-reinstall', '--no-deps', wheels[0]]) if wheels else sys.exit(1)"
        # Install dependencies separately
        pip install "pydantic>=2.0.0"
    
    - name: Verify installation
      run: |
        python -c "import floodr; print(f'floodr version: {floodr.__version__}')"
        python -c "import floodr; print(f'floodr location: {floodr.__file__}')"
        python -c "from floodr import Client; print(f'Client class: {Client}')"
        python -c "from floodr import Client; import inspect; print(f'Client init signature: {inspect.signature(Client.__init__)}')"
    
    - name: Run tests
      run: |
        pytest tests/ -v
    
    - name: Run Rust unit tests
      # Skip on macOS due to PyO3 linking issues
      if: runner.os != 'macOS'
      run: |
        cargo test --release

  lint:
    name: Lint Python
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black ruff mypy maturin pydantic
    
    - name: Check Python formatting with Black
      run: black --check floodr/ tests/
    
    - name: Lint with Ruff
      run: ruff check floodr/ tests/
    
    - name: Set up Rust (needed for maturin develop)
      uses: dtolnay/rust-toolchain@stable
    
    - name: Type check with mypy
      run: |
        # Clean and build fresh
        rm -rf build/ dist/ *.egg-info target/wheels/ || true
        maturin build --release
        # Install the built wheel
        python -c "import glob, subprocess, sys; wheels = glob.glob('target/wheels/floodr-*.whl'); subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--force-reinstall', '--no-deps', wheels[0]]) if wheels else sys.exit(1)"
        pip install "pydantic>=2.0.0"
        mypy floodr/ --ignore-missing-imports 